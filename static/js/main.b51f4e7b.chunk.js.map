{"version":3,"sources":["cards/cards.component.jsx","card-list/card-list.component.jsx","search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Cards","author","url","imageUrl","fullImageUrl","className","href","target","rel","alt","src","CardList","photos","map","pic","key","id","download_url","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","value","state","fetch","Math","floor","random","then","res","json","this","filteredPhotos","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uUAGaA,G,kBAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,IAAKC,EAAhB,EAAgBA,SAAUC,EAA1B,EAA0BA,aAA1B,OACnB,yBAAKC,UAAU,QACb,uBAAGC,KAAMF,EAAcG,OAAO,SAASC,IAAI,uBACzC,yBAAKC,IAAI,UAAUC,IAAKR,KAE1B,yBAAKG,UAAU,eACb,+BAAKJ,GACL,gCACE,uBACEI,UAAU,oBACVC,KAAMH,EACNI,OAAO,SACPC,IAAI,uBAEH,aCZEG,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACtB,yBAAKP,UAAU,aACZO,EAAOC,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,CACEC,IAAKD,EAAIE,GACTf,OAAQa,EAAIb,OACZC,IAAG,mCAA8BY,EAAIE,GAAlC,YACHZ,aAAcU,EAAIG,aAClBd,SAAUW,EAAIZ,WCTTgB,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,2BACEf,UAAU,SACVgB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCsCCG,E,kDAzCb,aAAe,IAAD,8BACZ,gBAQFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEjB,OAAOoB,SAPtC,EAAKC,MAAQ,CACXhB,OAAQ,GACRc,YAAa,IALH,E,gEAaO,IAAD,OAClBG,MAAM,sCAAD,OACmCC,KAAKC,MAAsB,GAAhBD,KAAKE,YAErDC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACrB,GAAD,OAAY,EAAKa,SAAS,CAAEb,OAAQA,S,+BAGpC,IAAD,EACyBwB,KAAKR,MAA7BhB,EADD,EACCA,OAAQc,EADT,EACSA,YACVW,EAAiBzB,EAAO0B,QAAO,SAACxB,GAAD,OACnCA,EAAIb,OAAOsC,cAAcC,SAASd,EAAYa,kBAEhD,OACE,yBAAKlC,UAAU,OACb,4BAAQA,UAAU,cAChB,+CACA,kBAAC,EAAD,CACEc,YAAY,oBACZC,aAAcgB,KAAKhB,eAErB,kBAAC,EAAD,CAAUR,OAAQyB,U,GAnCVI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b51f4e7b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./cards.styles.css\";\r\n\r\nexport const Cards = ({ author, url, imageUrl, fullImageUrl }) => (\r\n  <div className=\"card\">\r\n    <a href={fullImageUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <img alt=\"gallery\" src={url} />\r\n    </a>\r\n    <div className=\"card-author\">\r\n      <p> {author}</p>\r\n      <button>\r\n        <a\r\n          className=\"card-author__link\"\r\n          href={imageUrl}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {\"View\"}\r\n        </a>\r\n      </button>\r\n    </div>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\n\r\nimport \"./card-list.styles.css\";\r\nimport { Cards } from \"../cards/cards.component\";\r\n\r\nexport const CardList = ({ photos }) => (\r\n  <div className=\"card-list\">\r\n    {photos.map((pic) => (\r\n      <Cards\r\n        key={pic.id}\r\n        author={pic.author}\r\n        url={`https://picsum.photos/id/${pic.id}/367/267`}\r\n        fullImageUrl={pic.download_url}\r\n        imageUrl={pic.url}\r\n      ></Cards>\r\n    ))}\r\n  </div>\r\n);\r\n","import React from \"react\";\r\n\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n  />\r\n);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./card-list/card-list.component\";\nimport { SearchBox } from \"./search-box/search-box.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      photos: [],\n      searchField: \"\",\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  componentDidMount() {\n    fetch(\n      `https://picsum.photos/v2/list?page=${Math.floor(Math.random() * 30)}`\n    )\n      .then((res) => res.json())\n      .then((photos) => this.setState({ photos: photos }));\n  }\n\n  render() {\n    const { photos, searchField } = this.state;\n    const filteredPhotos = photos.filter((pic) =>\n      pic.author.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1> Image Gallery </h1>\n          <SearchBox\n            placeholder=\"search authors...\"\n            handleChange={this.handleChange}\n          ></SearchBox>\n          <CardList photos={filteredPhotos}></CardList>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}